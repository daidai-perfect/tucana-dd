import{c as i}from"./@improbable-eng-BU3rlaSz.js";import{b as s}from"./bn.js-CjHYPH1W.js";import{r as c}from"./vite-plugin-node-polyfills-2b3IylRN.js";import{j as p}from"./keccak-C1V6dJ9R.js";var n=i&&i.__importDefault||function(r){return r&&r.__esModule?r:{default:r}};const y=n(s),m=n(c()),x=n(p),t=m.default.Buffer;function f(r){return r=d(r),(0,x.default)("keccak256").update(r).digest()}function d(r){if(!t.isBuffer(r))if(Array.isArray(r))r=t.from(r);else if(typeof r=="string")h(r)?r=t.from(o(g(r)),"hex"):r=t.from(r);else if(typeof r=="number")r=w(r);else if(r==null)r=t.allocUnsafe(0);else if(y.default.isBN(r))r=r.toArrayLike(t);else if(r.toArray)r=t.from(r.toArray());else throw new Error("invalid type");return r}function h(r,e){return!(typeof r!="string"||!r.match(/^0x[0-9A-Fa-f]*$/))}function o(r){if(typeof r!="string")throw new Error(`while padding to even, value must be string, is currently ${typeof r}, while padToEven.`);return r.length%2&&(r=`0${r}`),r}function g(r){return typeof r!="string"?r:k(r)?r.slice(2):r}function k(r){if(typeof r!="string")throw new Error("value must be type 'string', is currently type "+typeof r+", while checking isHexPrefixed.");return r.slice(0,2)==="0x"}function w(r){const e=_(r);return t.from(o(e.slice(2)),"hex")}function _(r){return`0x${r.toString(16)}`}typeof window<"u"&&(window.keccak256=f);var E=f;export{E as k};
